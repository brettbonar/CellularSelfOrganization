{"name":"Identification of Self-Organizing Multicellular Systems","tagline":"","body":"### Cellular Self-Organization\r\nSelf-organization could be defined as the undirected movement of a chaotic structure into an ordered one. In a biological system, this may be seen as a formation of cells gradually reforms into a regular arrangement. Such arrangements could be lattices or grids that are identified as having regular or repeating patterns. These systems may prove valuable to disciplines such as medicine and bioengineering. Determining the behaviors with which to compose a self-organizing system is a nontrivial\r\ntask. While many such systems have already been identified, the considerable amount of traits comprising cellular behaviors would make an exhaustive search of undiscovered systems impossible.\r\n\r\n### Why?\r\nSelf-organizing biological systems are potentially useful in medical and bioengineering fields.\r\n\r\n### What\r\nThis project implements a simple hill climber written on Python that works on a limited set of cellular behaviors from the CompuCell3D simulator. An evaluation of the set complexity of the simulated result of a biological system is used to determine self-organization and regularity (i.e. the fitness function).\r\n\r\n### Initial Results\r\nThe following charts show some of the results of a few initial runs of the hill climber. The algorithm was run for 50 iterations. The initial configuration was random and each subsequent iteration modified a random parameter (currently limited to modifying only contact energy, but will be expanded to other parameters). The CompuCell3D simulator was run on each iteration for 1000 MCS and the final output evaluated for complexity.\r\n\r\nImprovement of complexity over time (iteration of hill climber).\r\n![](http://i1379.photobucket.com/albums/ah131/bbonar/Complexity_zpsb9aegc57.png)\r\n\r\nThis second chart shows the value of the best complexity over time. Note how it quickly reaches a local maxima. This is generally not ideal as it potentially excludes better results. This should be able to be solved by increasing the number of iterations, simulation steps, expanding the list of variable parameters, and refining valid parameter ranges.\r\n\r\n![](http://i1379.photobucket.com/albums/ah131/bbonar/BestComplexity_zps3kxmqejb.png)\r\n\r\n### Remaining Work\r\n* Increase number of iterations and MCS steps\r\n* Expand the number of variable parameters, refine parameter ranges.\r\n* Clean up code, remove hardcoded paths and variables.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}