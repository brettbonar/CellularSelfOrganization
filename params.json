{"name":"Identification of Self-Organizing Multicellular Systems","tagline":"","body":"### Cellular Self-Organization\r\nSelf-organization could be defined as the undirected movement of a chaotic structure into an ordered one. In a biological system, this may be seen as a formation of cells gradually reforms into a regular arrangement. Such arrangements could be lattices or grids that are identified as having regular or repeating patterns. Determining the behaviors with which to compose a self-organizing system is a nontrivial task. While many such systems have already been identified, the considerable amount of traits comprising cellular behaviors would make an exhaustive search of undiscovered systems impossible. The ability to discover these types of systems could prove valuable to disciplines such as medicine and bioengineering where regular patterns have real applications.\r\n\r\n[Self-Organization of a Multicellular System](https://www.dropbox.com/s/wlvgpivsng3nzui/NetworkExample.avi?dl=0)\r\n\r\n![networkend](https://cloud.githubusercontent.com/assets/7144970/11803872/2abac19a-a2bc-11e5-8f71-fbdfd7c6e763.png)\r\n\r\n### Goals\r\nThe goal of this project is to create a tool that is capable of identifying biological systems that organize into regular patterns. A biological system in this case is composed of one or more cell types and their behaviors. These cells will be simulated using the [CompuCell3D Simulator](http://www.compucell3d.org/) to determine if they are \"self-organizing\".\r\n\r\nThe idea is that these cells and their behaviors could then be replicated in the real world where their organized patterns may prove useful. Such cells could already exist in nature or be grown in a lab through genetic engineering processes.\r\n\r\n### Method\r\nThis project implements a simple hill climber written in Python that works on a limited set of cellular behaviors from the CompuCell3D simulator. An evaluation of the set complexity of the simulated result of a biological system is used to determine self-organization and regularity (i.e. the fitness function).\r\n\r\nWhile CompuCell3D supports 3D cells, this simulation is limited to 2D for the purpose of simplicity and simulation speed. The CompuCell3D simulator supports a large number of cell attributes and behaviors. These have been narrowed down to a few variable parameters:\r\n* Contact (adhesion) energy between cells\r\n* Diffusion field parameters:\r\n * Decay rate\r\n * Diffusion constant\r\n * Secretion rate for each cell type\r\n* Chemotaxis for each cell type\r\n\r\nThe diffusion field and chemotaxis parameters are directly related. This project uses the CompuCell3D DiffusionSolverFE plugin to simulate chemotaxis. The secretion rate is the amount of chemical field that is secreted by each cell type. Chemotaxis then defines the rate at which cells are attracted to the chemical field. Chemotaxis is one of the most important and useful cellular properties for creating self-organizing biological systems.\r\n\r\nThe hill climber begins with a random configuration of the above parameters in addition to a random number of cell types (currently just one or two) and random volume for each type of cell. Number of cell types and cell volume are not changed between iterations. The initial configuration is run through the CompuCell3D simulator four times with different random seeds to generate four distinct results. Each simulation is run for 1000 Monte Carlo Steps (MCS). Each MCS step is one iteration of the simulation. The set complexity is then calculated using the four final outputs as the set.\r\n\r\nThe algorithm repeatedly performs a random walk on one of the variable parameters. If the resulting set complexity of the simulation is better than the previous best then this is taken as the new best result. This is repeated until no improvements have been made for a number of iterations, at which point the hill climber terminates and an XML file representing the latest best configuration is output.\r\n\r\nThe method used to calculate set complexity is as given by Dr. Flann and adapted to use image compression techniques on Dr. Flann's advice. The calculation of set complexity depends on the Kolmogorov complexity of a set of objects (in this case images output by the simulator), which can be estimated by the Normalized Compression Distance (NCD). The NCD can be considered a measure of the similarity of two objects. NCD is maximized when both inputs are random or dissimilar and is minimized when both objects are identical. NCD is calculated with the following formula:\r\n\r\n![ncd](https://cloud.githubusercontent.com/assets/7144970/11803555/4693a18c-a2b9-11e5-9a94-21f043708796.png)\r\n\r\nWhere C(x) and C(y) are the compressed sizes of two input images and C(x+y) is the compressed size of the concatentation of both images.\r\n\r\nSet complexity can then be defined as an evaluation of the NCD for each pair of inputs:\r\n\r\n![setcomplexity](https://cloud.githubusercontent.com/assets/7144970/11803550/3e8ff85a-a2b9-11e5-9fa2-b8c4fe471ddb.png)\r\n\r\nThis method of evaluating set complexity was used on a subset of the problem domain. Two identical cell types were created (Cell 1 and Cell 2) and the contact energy between these two types was set to 10. The following heat map was generated by testing the effects of change in contact energy between cells of the same type. Note that simulations were run only for test cases under the diagonal and the remainder was extrapolated. Since all parameters other than contact energy were identical, there is no reason to expect (0,2) to differ in any way from (2,0). Red in this case indicates a high set complexity result. The other two images show example output at (0,0) and (16,16).\r\n\r\n![heatmap2](https://cloud.githubusercontent.com/assets/7144970/11820310/0d470668-a321-11e5-9f56-ee5ae8b04928.png)\r\n\r\n![0_0](https://cloud.githubusercontent.com/assets/7144970/11820389/93915d54-a321-11e5-9b7a-965e5a6253e3.png)\r\n\r\n![16_16](https://cloud.githubusercontent.com/assets/7144970/11820393/959d2b5a-a321-11e5-8aaa-eeb3791f1e24.png)\r\n\r\n### Results\r\nThe following are examples of runs of the hill climber. The CompuCell3D simulator was run on each iteration for 1000 MCS and the final output of four runs with different random seeds were evaluated for complexity.\r\n\r\nThis is the output of the initial random configuration:\r\n\r\n![example1begin](https://cloud.githubusercontent.com/assets/7144970/11820737/4331c3f6-a323-11e5-9ba7-0b5e8c597e23.png)\r\n\r\nAnd the output after several hill climber iterations in which the contact energy was modified. Notice how it forms a checkerboard pattern:\r\n\r\n![example1end](https://cloud.githubusercontent.com/assets/7144970/11820739/462c404a-a323-11e5-9520-8a0ba24d66f8.png)\r\n\r\nAn example of the improvement in complexity over each iteration. Note how it quickly plateaus with only minor improvements from then on. I expected it to take more time to reach a maximum, but it was often the case that nearly the best result was found within 10-20 iterations.\r\n\r\n![complexitychart](https://cloud.githubusercontent.com/assets/7144970/11802268/17daad5c-a2ac-11e5-8c77-e847d73e918f.png)\r\n\r\nThe following video is a slideshow of the outputs of a single run of the hill climber. Each image shows the final output after 1000 MCS. You may observe the system gradually begin to show more interesting results.\r\n\r\n[Hill Climber Output](https://www.dropbox.com/s/0bazofhs3u5e112/HillClimberExample2.avi?dl=0)\r\n\r\nThe following are a few other results that (I think) are interesting:\r\n![example2](https://cloud.githubusercontent.com/assets/7144970/11803862/1781fc88-a2bc-11e5-8892-ef1587f44a49.png)\r\n![example3](https://cloud.githubusercontent.com/assets/7144970/11803863/1863228a-a2bc-11e5-904b-dfdea11df876.png)\r\n![example4](https://cloud.githubusercontent.com/assets/7144970/11803864/195edbf2-a2bc-11e5-99ba-1506df56e964.png)\r\n![networkend](https://cloud.githubusercontent.com/assets/7144970/11803872/2abac19a-a2bc-11e5-8f71-fbdfd7c6e763.png)\r\n\r\n### Issues\r\nWhile this method works well in distinguishing between random and organized systems, it does not always identify what we may consider to be the most ideal result. The following image, for example, is the result of a number of iterations. The set complexity function believes it to be interesting even though we may not think so. This is likely an inherent flaw in using a general method for determining complexity. Future work may include developing more specialized algorithms to better identify specific patterns.\r\n\r\n![badexample](https://cloud.githubusercontent.com/assets/7144970/11803885/42cdab4e-a2bc-11e5-8385-6608928d9f68.png)\r\n\r\n### Usage\r\nThe program runs from a single batch script. This is in order to use the same setup that the CC3D simulator uses (also in a .bat file).\r\nThe one task remaining is to remove some hardcoded file paths for the CC3D script locations and simulator output location.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}